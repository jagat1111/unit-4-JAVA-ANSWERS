47.1.1
In non-static init block 1
In non-static init block 2
In constructor
value = 3
In non-static init block 1
In non-static init block 2
In constructor
value = 3

47.1.2
Before any constructor is called, every time an instance of the class is created.

47.1.3

import java.util.Scanner;

class Person {
    private String name;
    private int age;
    private String address;

    public Person(String name, int age, String address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }


    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getAddress() {
        return address;
    }
}

class PersonManager {
    private Person person;

    {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter name:");
        String name = scanner.nextLine();
        System.out.print("Enter age:");
        int age = scanner.nextInt();
        scanner.nextLine(); // consume newline
        System.out.print("Enter address:");
        String address = scanner.nextLine();

        person = new Person(name, age, address);
    }

    public void printPersonDetails() {
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
        System.out.println("Address: " + person.getAddress());
    }
}

public class Main {
    public static void main(String[] args) {
        PersonManager manager = new PersonManager();
        manager.printPersonDetails();
    }
}



47.2.1

In static init block 1
In static init block 2
In constructor
In constructor


47.2.2
import java.util.Scanner;

public class StaticInitializationExample {
    // Static variable declaration
    static int x;

    // Static initialization block
    static {
        Scanner scanner = new Scanner(System.in);
        System.out.print("value of x: ");
        x = scanner.nextInt();
        System.out.println("Static block initialized with x = " + x);
    }

    public static void main(String[] args) {
        System.out.println("Inside main method");
        System.out.println("Value of x: " + x);
    }
}

47.2.3

import java.util.Scanner;

public class MultipleStaticBlocksDemo {
    static int a;

    static {
        Scanner scanner = new Scanner(System.in);
        System.out.print("value for a: ");
        a = scanner.nextInt();
        System.out.println("First static block executed");
    }

    static {
        System.out.println("Second static block executed");
    }

    public static void main(String[] args) {
        System.out.println("Static block initialized with a = " + a);
    }
}

48.1.1


class A {
    static int aStaticField; // static field
    int instanceField; // instance field

    // Constructor to initialize instance field
    A(int instanceFieldValue) {
        this.instanceField = instanceFieldValue;
    }
}

public class StaticFieldDemo {
    public static void main(String[] args) {
        A a1 = new A(3);
        A a2 = new A(4);

        // Accessing static field using class name
        A.aStaticField = 5;

        // Printing the values of instanceField and aStaticField for each instance
        System.out.println("a1 = A [instanceField = " + a1.instanceField + ", aStaticField = " + A.aStaticField + "]");
        System.out.println("a2 = A [instanceField = " + a2.instanceField + ", aStaticField = " + A.aStaticField + "]");
        System.out.println("A.aStaticField = " + A.aStaticField);
    }
}
48.1.2

public class CounterTest {
    private static int count = 1;

    public static void increment() {
        count++;
    }

    public static void decrement() {
        count--;
    }

    public static void displayCount() {
        System.out.println("Current value of count is: " + count);
    }

    public static void main(String[] args) {
        // Test case 1
        displayCount(); // Initial value of count is 0

        increment();    // Increment count by 1
        displayCount(); // Current value of count is 1


        decrement();    // Decrement count by 1
        displayCount(); // Current value of count is 1
    }
}

48.1.3
import java.util.Scanner;

public class Quiz {
    private static double averageScore = 0;
    private static int numQuizzes = 0;

    public static void updateAverage(double score) {
        averageScore = (averageScore * numQuizzes + score) / (numQuizzes + 1);
        numQuizzes++;
        System.out.println("Current average score: " + averageScore);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.print("Enter quiz score (or type 'q' to quit): ");
            String input = scanner.nextLine();
            if (input.equalsIgnoreCase("q")) {
                break;
            }
            try {
                double score = Double.parseDouble(input);
                updateAverage(score);
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number or 'q' to quit.");
            }
        }
        scanner.close();
    }
}


48.2.1

class A {
    private int instanceField;
    private static int counter = 0; // Static field to keep track of instances

    public A(int instanceField) {
        this.instanceField = instanceField;
        counter++; // Increment the counter for each instance created
    }

    public static int getInstanceCount() {
        return counter; // Static method to access the static field
    }

    @Override
    public String toString() {
        return "A [instanceField = " + instanceField + ", counter = " + counter + "]";
    }
}

public class StaticMethodDemo {
    public static void main(String[] args) {
        A a1 = new A(3);
        A a2 = new A(4);

        System.out.println("a1 = " + a1);
        System.out.println("a2 = " + a2);
        // Accessing static method correctly using class name
        System.out.println("A.getInstanceCount() = " + A.getInstanceCount());
    }
}
48.2.2

//write the code
    public static int add(int x, int y) {
        return x + y;
    }

48.2.3
import java.util.Scanner;

class A {
    public static String concatenate(String str1, String str2) {
        return str1 + str2;
    }
}

public class StringUtils {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the first string:");
        String str1 = scanner.nextLine();
        
        System.out.println("Enter the second string:");
        String str2 = scanner.nextLine();
        
        String result = A.concatenate(str1, str2);
        System.out.println("Concatenated string: " + result);
        
        scanner.close();
    }
}

48.3.1

// Define the main class StaticClassDemo
public class StaticClassDemo {
    
    // Define the main method
    public static void main(String[] args) {
        // Create instances of the nested static class A
        A a1 = new A(3);
        A a2 = new A(4);
        
        // Print string representation of a1 and a2
        System.out.println("a1 = " + a1);
        System.out.println("a2 = " + a2);
    }
    
    // Define a static nested class A
    static class A {
        // Private integer variable value
        private int value;
        
        // Constructor for class A
        public A(int value) {
            this.value = value;
        }
        
        // Override toString method to return string representation
        @Override
        public String toString() {
            return "A [value = " + value + "]";
        }
    }
}


48.3.2

import java.util.Scanner;

public class MathMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        int a = scanner.nextInt();

        
        int b = scanner.nextInt();

        scanner.close();

        System.out.println("Addition: " + MathUtils.add(a, b));
        System.out.println("Subtraction: " + MathUtils.subtract(a, b));
        System.out.println("Multiplication: " + MathUtils.multiply(a, b));
    }

    static class MathUtils {
        public static int add(int a, int b) {
            return a + b;
        }

        public static int subtract(int a, int b) {
            return a - b;
        }

        public static int multiply(int a, int b) {
            return a * b;
        }
    }
}
